asyncapi: 2.0.0
info:
  title: SharingPad
  version: '1.0.0'
  description: SharingPad async apis
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  production:
    url: mqtt.sharingpad.ai
    protocol: mqtt
    description: message broker
defaultContentType: application/json

channels:
  projects:
    description: projects channel
    subscribe:
      summary: retrives last updates in projects collection
      operationId: retriveProjectsUpdates
      # traits:
      #   - $ref: '#/components/operationTraits/kafka'
      message:
        oneOf:
          - $ref: '#/components/messages/projectCreated'
          - $ref: '#/components/messages/projectUpdated'
          - $ref: '#/components/messages/projectRemoved'
    publish:
      summary: publish new changes in projects collection
      operationId: publishProject
      # traits:
      #   - $ref: '#/components/operationTraits/kafka'
      message:
        oneOf:
          - $ref: '#/components/messages/createProject'
          - $ref: '#/components/messages/updateProject'
          - $ref: '#/components/messages/removeProject'
  files:
    description: files channel
    subscribe:
      summary: retrives last updates in files collection
      operationId: retriveFilesUpdates
      # traits:
      #   - $ref: '#/components/operationTraits/kafka'
      message:
        oneOf:
          - $ref: '#/components/messages/fileCreated'
          - $ref: '#/components/messages/fileUpdated'
          - $ref: '#/components/messages/fileRemoved'
    publish:
      summary: publish new changes in files collection
      operationId: publishFile
      # traits:
      #   - $ref: '#/components/operationTraits/kafka'
      message:
        oneOf:
          - $ref: '#/components/messages/createFile'
          - $ref: '#/components/messages/updateFile'
          - $ref: '#/components/messages/removeFile'

components:
  messages:
    projectCreated:
      name: projectCreated
      title: project created
      summary: new project created
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: create
            enum:
              - create
              - update
              - delete
          project:
            $ref: '#/components/schemas/project'
    projectUpdated:
      name: projectUpdated
      title: project updated
      summary: new project updated
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          project:
            $ref: '#/components/schemas/project'
    projectRemoved:
      name: projectRemoved
      title: project removed
      summary: new project removed
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          id:
            type: string
            description: uuid of project
            example: sample-uuid
    createProject:
      name: createProject
      title: create project
      summary: create new project
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: create
          title:
            type: string
            description: project title
            example: foo project
    updateProject:
      name: updateProject
      title: update a project
      summary: update a project based on project uuid
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          id:
            type: string
            description: project uuid
            example: sample-uuid
          title:
            type: string
            description: project title
            example: foo project
    removeProject:
      name: removeProject
      title: remove project
      summary: remove new project
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: remove
          id:
            type: string
            description: project uuid
            example: sample-uuid
  
    fileCreated:
      name: fileCreated
      title: file created
      summary: new file created
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: create
            enum:
              - create
              - update
              - delete
          file:
            $ref: '#/components/schemas/file'
    fileUpdated:
      name: fileUpdated
      title: file updated
      summary: new file updated
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          file:
            $ref: '#/components/schemas/file'
    fileRemoved:
      name: fileRemoved
      title: file removed
      summary: new file removed
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          id:
            type: string
            description: uuid of file
            example: sample-uuid
    createFile:
      name: createFile
      title: create file
      summary: create new file
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: create
          title:
            type: string
            description: file title
            example: foo file
    updateFile:
      name: updateFile
      title: update a file
      summary: update a file based on file uuid
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: update
          id:
            type: string
            description: file uuid
            example: sample-uuid
          title:
            type: string
            description: file title
            example: foo file
    removeFile:
      name: removeFile
      title: remove file
      summary: remove new file
      contentType: application/json
      payload:
        type: object
        properties:
          action:
            type: string
            description: action type
            example: remove
          id:
            type: string
            description: file uuid
            example: sample-uuid
  
  schemas:
    owner:
      type: object
      description: owner of project
      properties:
        name:
          type: string
          format: email
          example: 'user@mail.com'
        type:
          type: string
          example: sample-owner
    project:
      type: object
      properties:
        '@id':
          type: string
          description: uuid of project
          example: sample-uuid
        owner:
          $ref: '#/components/schemas/owner'
        '@context':
            type: string
            description: context of project
            example: sample-context
        '@type':
            type: string
            description: type of project
            example: sample-type
        created:
            type: string
            description: created date
            example: '2020-11-04'
        createdBy:
            type: string
            description: created by user
            example: 'user@mail.com'
        files:
            type: number
            description: files count
            example: 24
        name:
            type: string
            description: project name
            example: foo project
        thumbnail:
            type: string
            description: project thumbnail url
            example: https://sharingpad.ai/thumbnail-url
        updated:
            type: string
            description: updated date
            example: '2020-11-04'
        updatedBy:
            type: string
            description: updated by user
            example: 'user@mail.com'

    file:
      type: object
      properties:
        '@id':
          type: string
          description: uuid of file
          example: sample-uuid
        name:
          type: string
          description: title of file
          example: foo file
        tags:
          type: array
          items:
            type: string
          example: ['large', 'floor1']
        '@context':
            type: string
            description: context of file
            example: sample-context
        '@type':
            type: string
            description: type of file
            example: sample-type
        updated:
            type: string
            description: updated date
            example: '2020-11-04'
        updatedBy:
            type: string
            description: updated by user
            example: 'user@mail.com'
        created:
            type: string
            description: created date
            example: '2020-11-04'
        createdBy:
            type: string
            description: created by user
            example: 'user@mail.com'
        owner:
          $ref: '#/components/schemas/owner'
        thumbnail:
            type: string
            description: file thumbnail url
            example: https://sharingpad.ai/thumbnail-url
        processing:
            type: boolean
            description: if file is processing
            example: false